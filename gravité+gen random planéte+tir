import pygame
import   math
import random

# Initialisation de Pygame
pygame.init()

# Configuration de la fenêtre
WIDTH, HEIGHT = 1920, 1080
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Moteur physique de merde")

#texte
big_font = pygame.font.SysFont('Arial', 40)
small_font = pygame.font.SysFont('Arial', 20)

# Couleurs
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
BLUE = (0, 0, 255)
A = (255, 255, 0)
B = (0, 255, 255)
WHITE = (255, 255, 255)

# Constantes physiques
G = 10

# vitesse initiale des balles
vx=10
vy=0

# Liste des planètes (coordonnées et masses)
planetes = []

#permet de mesurer la distance entre 2 planetes
def distance(p1, p2):
    return math.sqrt((p1["x"] - p2["x"])**2 + (p1["y"] - p2["y"])**2)

#couleur des planetes
colors = [
    (255, 0, 0),      # Rouge
    (0, 255, 0),      # Vert
    (0, 0, 255),      # Bleu
    (255, 255, 0),    # Jaune
    (0, 255, 255),    # Cyan
    (255, 0, 255),    # Magenta
    (128, 0, 0),      # Marron
    (128, 128, 0),    # Olive
    (0, 128, 0),      # Vert foncé
    (128, 0, 128),    # Violet
    (0, 128, 128),    # Bleu-vert
    (0, 0, 128),      # Bleu marine
    (255, 165, 0),    # Orange
    (255, 192, 203),  # Rose
    (75, 0, 130),     # Indigo
    (139, 69, 19),    # Brun
    (255, 215, 0),    # Or
    (192, 192, 192),  # Argent
    (169, 169, 169),  # Gris foncé
    (0, 255, 127)     # Vert printemps
]
pla = random.randint(2, 4) #permet de définir l'intervale de planéte généré
for i in range(pla):
    while True:
        x = random.randint(300, 1620)
        y = random.randint(300, 780)
        masse = random.randint(250, 1500)
        color = random.choice(colors)
        new_planet = {"x": x, "y": y, "masse": masse, "color": color}

        # Vérifier la distance avec toutes les planètes existantes
        if all(distance(new_planet, p) > (p["masse"] / 10 + new_planet["masse"] / 10 + 20) for p in planetes):
            planetes.append(new_planet)
            break  # Sort de la boucle while quand une planète valide est trouvée

# Liste des projectiles
projectiles = []

#coordonnées d'apparition du point bleu
x=200
y=200

# Calcul des forces gravitationnelles
def calculeNewton(proj, planete):
    dx = planete["x"] - proj["x"]
    dy = planete["y"] - proj["y"]
    distance_carre = dx ** 2 + dy ** 2
    if distance_carre < 1000:  # Évite des accélérations trop grandes si trop proche
        return [0, 0]
    force_magnitude = G * planete["masse"] / distance_carre
    distance = math.sqrt(distance_carre)
    return [force_magnitude * dx / distance, force_magnitude * dy / distance]


# Boucle principale
clock = pygame.time.Clock()
running = True

while running:
    keys = pygame.key.get_pressed()
    if keys[pygame.K_DOWN]:                     #modifie les coordonées du point bleu
        y += 1
    if keys[pygame.K_UP]:
        y -= 1
    if keys[pygame.K_RIGHT]:
        x += 1
    if keys[pygame.K_LEFT]:
        x -= 1

    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            running = False
            pygame.quit()

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                # Création d'un nouveau projectile
                projectiles.append({"x": x, "y": y, "vx": vx, "vy": vy})
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_a:
                running = False
                pygame.quit()
            if event.key == pygame.K_s:
                vy += 0.1
            if event.key == pygame.K_z:
                vy -= 0.1
            if event.key == pygame.K_d:
                vx += 0.1
            if event.key == pygame.K_q:
                vx -= 0.1


    # Effacer l'écran
    screen.fill(BLACK)

    # Dessiner les planètes
    for planete in planetes:
        pygame.draw.circle(screen, planete["color"], (planete["x"], planete["y"]), planete["masse"]/10)

    # Dessiner la position initiale du projectile en bleu
    pygame.draw.circle(screen, BLUE, (x, y), 10)

    # Mettre à jour et dessiner les projectiles
    for proj in projectiles:
        accel_x, accel_y = 0, 0
        collide=0
        for planete in planetes: #permet de calculer pour chaque planete l'acceleration de la balle
            force = calculeNewton(proj, planete)
            accel_x += force[0]
            accel_y += force[1]
            collided = (math.sqrt((proj["x"] - planete["x"]) ** 2 + (proj["y"] - planete["y"]) ** 2) <= planete["masse"]/10)  #permet de calculer pour chaque planete les colisions avec les balles
            if  collided and collide==0:
                collide+=1
                projectiles.remove(proj)
        off_screen = (proj["x"] < 0 or proj["x"] > WIDTH or proj["y"] < 0 or proj["y"] > HEIGHT) #verif si la balle est dans l'écran
        if off_screen:
            projectiles.remove(proj) #suprime la balle si elle est hors de l'écran
        # Mise à jour des vitesses et positions
        proj["vx"] += accel_x
        proj["vy"] += accel_y
        proj["x"] += proj["vx"]
        proj["y"] += proj["vy"]

        # Dessiner le projectile
        pygame.draw.circle(screen, GREEN, ((proj["x"]), (proj["y"])), 10)
    
    #affiche puissance du tir
    txt = big_font.render(('Vx: ' + str(round(vx, 2)) + 'Vy: ' + str(round(vy, 2))), True, WHITE) 
    screen.blit(txt, (200, 75))


    # Mettre à jour l'affichage
    pygame.display.flip()
    clock.tick(120)
